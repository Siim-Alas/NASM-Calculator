
%include "config.mac"

%ifndef STRING_MACROS_MAC
	%define STRING_MACROS_MAC

	; pertinent ASCII reference table

	; hex  | char
	; -----|-----
	; [...]
	; 0x28 | (
	; 0x29 | )
	; 0x2A | *
	; 0x2B | +
	; 0x2C | ,
	; 0x2D | -
	; 0x2E | .
	; 0x2F | /
	; 0x30 | 0
	; 0x31 | 1
	; 0x32 | 2
	; 0x33 | 3
	; 0x34 | 4
	; 0x35 | 5
	; 0x36 | 6
	; 0x37 | 7
	; 0x38 | 8
	; 0x39 | 9
	; [...]

	%define FLOAT_STRINGREP_LEN 2 + SIGNIFICANT_FIGURES + 2 + 4

	; finds the appropriate handler for a given character
	; parameters:
	;  1. char, a pointer to the character
	;  2. ERR_UNRECOGNIZED_CHAR, the label for handling invalid characters
	;  3. character handler jump table, containing the 32-bit addresses:
	;	1. handle "(", a label
	;	2. handle ")", a label
	;	3. handle "*", a label
	;	4. handle "+", a label
	;	5. handle ",", a label
	;	6. handle "-", a label
	;	7. handle ".", a label
	;	8. handle "/", a label
	;	9. handle 0-9, a label (repeated 10 times)
	%macro find_handler 3
		movzx rax, byte [%1]
		sub rax, 0x28
		cmp rax, 0x39 - 0x28
		ja %2

		mov eax, [rax * 4 + %3]
		jmp rax
	%endmacro

	; creates a string representation (in scientific notation) of the
	; contents of st0, leaving a value pushed before it on the FPU stack
	; parameters:
	;  1. str, a pointer to the start of the string (this will get left
	;     pointing to one past the end of the string)
	%macro float_to_string 1
		fldlg2		; st0 = log10(2); st1 = val
		fld st1		; st0 = val; st1 = log10(2); st2 = val
		fabs		; st0 = |val|; st1 = log10(2); st2 = val
		fyl2x		; st0 = log10(2) * log2(|val|); st1 = val

		; note that from the identity logb(a) = logx(a) / logx(b) =>
		; => logx(b) * logb(a) = logx(a), we have
		; log10(2) * log2(val) = log10(val), so the registers are
		; st0 = log10(val); st1 = val

		sub rsp, 8

		fstcw word [rsp]
		mov ax, word [rsp]
		or ah, 0b00001100
		and ah, 0b11110111	; set RC to round down (0b01)
		mov word [rsp], ax
		fldcw word [rsp]

		frndint			; st0 = floor(log10(|val|)); st1 = val
		fist dword [rsp]	; exponent
		movsx rcx, dword [rsp]

		; to get the base-10 significand, we multiply the value by
		; 10^-exponent, noting that 10^n = (2^log2(10))^n = 
		; = 2^(log2(10) * n)

		; for the significand to round to the specified number of
		; digits, we further multiply by 10^(SIGNIFICANT_FIGURES - 1),
		; denoting the above exponent sfm1

		mov qword [rsp], SIGNIFICANT_FIGURES - 1
		fild qword [rsp]
		; st0 = sfm1
		; st1 = floor(log10(|val|))
		; st2 = val
		fsubrp st1
		; st0 = sfm1 - floor(log10(|val|))
		; st1 = val
		fldl2t
		; st0 = log2(10)
		; st1 = sfm1 - floor(log10(|val|))
		; st2 = val
		fmulp st1
		; st0 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st1 = val
		fld st0
		; st0 = st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val

		fstcw word [rsp]
		mov ax, word [rsp]
		or ah, 0b00001100	; set RC to truncate (0b11)
		mov word [rsp], ax
		fldcw word [rsp]

		frndint
		; st0 = trunc(log2(10) * (sfm1 - floor(log10(|val|))))
		; st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val
		fsubr st1
		; st0 = log2(10) * (sfm1 - floor(log10(|val|))) - 
		;	- trunc(log2(10) * (sfm1 - floor(log10(|val|))))
		; st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val
		f2xm1
		; st0 = 2^(log2(10) * (sfm1 - floor(log10(|val|))) -
		;	- trunc(log2(10) * (sfm1 - floor(log10(|val|))))) - 1
		; st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val
		fld1
		; st0 = 1
		; st1 = 2^(log2(10) * (sfm1 - floor(log10(|val|))) -
		;	- trunc(log2(10) * (sfm1 - floor(log10(|val|))))) - 1
		; st2 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st3 = val
		faddp st1
		; st0 = 2^(log2(10) * (sfm1 - floor(log10(|val|))) -
		;	- trunc(log2(10) * (sfm1 - floor(log10(|val|)))))
		; st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val
		fmul st2
		; st0 = val * 2^(log2(10) * (sfm1 - floor(log10(|val|))) -
		;	- trunc(log2(10) * (sfm1 - floor(log10(|val|)))))
		; st1 = log2(10) * (sfm1 - floor(log10(|val|))
		; st2 = val
		fscale
		; st0 = val * 10^(sfm1 - floor(log10(|val|)))
		; st1 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st2 = val

		fstcw word [rsp]
		mov ax, word [rsp]
		and ah, 0b11110011	; set RC to nearest (0b00)
		mov word [rsp], ax
		fldcw word [rsp]

		fistp qword [rsp]
		; st0 = log2(10) * (sfm1 - floor(log10(|val|)))
		; st1 = val
		pop rdx			; significand * 10^sfm1

		cmp rdx, 0
		jl %%FLOAT_TO_STRING_NEGATIVE

		mov byte [%1], "+"
		jmp %%FLOAT_TO_STRING_BOTH

		%%FLOAT_TO_STRING_NEGATIVE:
		mov byte [%1], "-"
		neg rdx

		%%FLOAT_TO_STRING_BOTH:
		inc %1

		%assign i 1
		%rep SIGNIFICANT_FIGURES - 1
			%assign i 10 * i
		%endrep

		mov rax, rdx
		mov rdx, 0
		mov rbx, i
		div rbx

		add rax, 0x30
		mov [%1], rax
		inc %1

		mov byte [%1], "."
		inc %1

		%rep SIGNIFICANT_FIGURES - 1
			%assign i i / 10

			mov rax, rdx
			mov rdx, 0
			mov rbx, i
			div rbx

			add rax, 0x30
			mov [%1], rax
			inc %1
		%endrep

		mov byte [%1], "E"
		inc %1

		mov rdx, rcx
		int_to_string %1, 4	; 15-bit exponent -> 2^15 = 3.2768*10^4
	%endmacro

	; creates a string representation with 1 + maxp10 characters (+/- and
	; the digits 0-9) of the integer in rdx and zeroes rdx in the process
	; parameters:
	; 1. str, a pointer to the start of the string (this will get
	;    incremented!)
	; 2. maxp10, a compile-time constant containing the maximum power of
	;    10 (i.e 19 for uint64) that the value of the int can have
	%macro int_to_string 2
		cmp rdx, 0
		jl %%INT_TO_STRING_NEGATIVE

		mov byte [%1], "+"
		jmp %%INT_TO_STRING_BOTH

		%%INT_TO_STRING_NEGATIVE:
		mov byte [%1], "-"
		neg rdx

		%%INT_TO_STRING_BOTH:
		inc %1

		%assign i 1
		%rep %2
			%assign i 10 * i
		%endrep

		%rep %2
			%assign i i / 10

			mov rax, rdx
			mov rdx, 0
			mov rbx, i
			div rbx

			add rax, 0x30
			mov [%1], rax
			inc %1
		%endrep
	%endmacro

	; parses a string of digits (0-9 with decimal ".") into a floating-
	; point number and stores the result in st0, pushing it to the top of
	; the FPU stack
	; parameters:
	;  1. str, a pointer to the first digit of the string (this will get
	;     incremented!)
	%macro string_to_float 1
		mov rdi, %1
		%%STRING_TO_FLOAT_L1:
			inc %1
			mov al, byte [%1]
			sub al, 0x30
			cmp al, 0x0A
			jb %%STRING_TO_FLOAT_L1
		mov rsi, %1

		string_to_int rdi, rsi, rbx
		push rbx
		fild qword [rsp]	; st0 = integral part

		cmp byte [%1], "."
		jne %%STRING_TO_FLOAT_END

		mov rdi, %1
		inc rdi
		%%STRING_TO_FLOAT_L2:
			inc %1
			mov al, byte [%1]
			sub al, 0x30
			cmp al, 0x0A
			jb %%STRING_TO_FLOAT_L2

		cmp rdi, %1
		je %%STRING_TO_FLOAT_END

		mov rsi, %1
		string_to_int rdi, rsi, rbx

		mov qword [rsp], rbx
		fild qword [rsp]
		; st0 = fractional part; st1 = integral part

		mov qword [rsp], rcx	; note where string_to_int left rcx
		fidiv dword [rsp]
		; st0 = fractional part / rcx; st1 = integral part

		faddp st1
		; st0 = val

		%%STRING_TO_FLOAT_END:
		add rsp, 8
	%endmacro

	; parses a string of digits (0-9) into an integer
	; parameters:
	;  1. str, a pointer to the fisrst digit of the string
	;  2. strendp1, a pointer to one past the last digit of the string
	;     (this will get decremented!)
	;  3. int, the register to which the parsed integer is saved
	%macro string_to_int 3
		mov %3, 0
		mov rcx, 1

		%%STRING_TO_INT_LOOP:
			dec %2
			movzx eax, byte [%2]	; implicitly zeroes the rest
			sub rax, 0x30		; convert ASCII to int
			mul rcx
			add %3, rax

			imul rcx, 10

			cmp %2, %1
			jne %%STRING_TO_INT_LOOP
	%endmacro

	; gets the length of a null-terminated string of length > 0 (excluding
	; the null-terminator in both cases)
	; parameters:
	;  1. str, a pointer to the start of the string
	;  2. len, the register to which the string's length will get written
	%macro strlen 2
		mov %2, %1
		%%STRLEN_LOOP:
			inc %2
			cmp byte [%2], 0
			jne %%STRLEN_LOOP
		sub %2, %1
	%endmacro
%endif

